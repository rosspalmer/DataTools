vec
mean(vec)
sd(vec)
mom <- 1:10
mom[mom > 15] <- 13
mom
mom[mom > 5] <- 13
mom
bob <- 1:10
bob[6:10] <- 13
bob
v <- 4
if (v > 5) {
v <- 13
} else if (v < 5) {
v <- 0
} else {
print("it's 5!")
}
v
v <- 5
if (v > 5) {
v <- 13
} else if (v < 5) {
v <- 0
} else {
print("it's 5!")
}
print(v)
v <- 5
if (v > 5) {
v <- 13
} else if (v < 5) {
v <- 0
} else {
print("it's 5!")
}
print(v)
v <- 6000
if (v > 5) {
v <- 13
} else if (v < 5) {
v <- 0
} else {
print("it's 5!")
}
print(v)
for (i in seq(1,10)) {
print(i)
}
for (i in c("dog","cat","pig","cow")) {
print(i)
}
for (i in seq(from=0, to=30, by=5)) {
print(i)
}
for (i in 1:10) {
aVariable <- aVariable*2,
print(aVariable)
}
aVariable <- 1
for (i in 1:10) {
aVariable <- aVariable*2,
print(aVariable)
}
aVariable <- 1
for (i in 1:10) {
aVariable <- aVariable*2
print(aVariable)
}
getwd()
load('boulder-cleaned.RData',.GlobalEnv)
str(boulder.clean)
hist(boulder.clean$LIST.PRICE)
hist(boulder.clean$LIST.PRICE,
xlab='List Price',
main='Hello World')
plot(density(boulder.clean$LIST.PRICE))
barplot(table(boulder.clean$HOME.TYPE))
hist(boulder.clean$LIST.PRICE,
xlab='List Price',
main='Hello World')
boxplot(boulder.clean$LIST.PRICE)
boxplot(LIST.PRICE~HOME.TYPE, data=boulder.clean, ylab='List price')
with(boulder.clean,
plot(BEDS, LIST.PRICE,
main='List Price vs. Number of Beds',
type='n'))
with(subset(boulder.clean,
HOME.TYPE=='Single Family Residential'),
points(BEDS, LIST.PRICE, col='blue'))
?plot
with(subset(boulder.clean,
HOME.TYPE=='Single Family Residential'),
points(BEDS, LIST.PRICE, col='blue'))
with(subset(boulder.clean,
HOME.TYPE!='Single Family Residential'),
points(BEDS, LIST.PRICE, col='red'))
legend('topright', pch=1, col=('blue','red'),
legend=c('SFH','Other')
legend('topright', pch=1, col=c('blue','red'),
legend=c('SFH','Other'))
with(boulder.clean, plot(BEDS, LIST.PRICE,
main='List Price vs Beds'))
with(boulder.clean, abline(h=median(LIST.PRICE),v=median(BEDS)))
rm(list=ls())
if (!'boot' %in% installed.packages()){
install.packages('boot')
}
load('boulder-cleaned.RData')
str(boulder.clean)
apply(boulder.clean[,c('BEDS','BATHS')],2,sd,na.rm=TRUE)
lapply(boulder.clean[,c('BEDS','BATHS')],sd,na.rm=TRUE)
sapply(boulder.clean[,c('BEDS','BATHS')],sd,na.rm=TRUE)
tapply(boulder.clean$LIST.PRICE,boulder.clean$BEDS,mean)
colSums(is.na(boulder.clean))
boulder.clean = na.omit(boulder.clean)
boulder.clean = na.omit(boulder.clean)
# focus on single family residential homes and houses with list price less than 3 million dollars
boulder.sfr = boulder.clean[boulder.clean$HOME.TYPE=='Single Family Residential',c('LIST.PRICE','SQFT','PARKING.TYPE')]
boulder.sfr = subset(boulder.sfr,LIST.PRICE<3000)
lm.fit = lm(LIST.PRICE~SQFT+PARKING.TYPE,data=boulder.sfr)
summary(lm.fit)
numberGrade <- 74
if (numberGrade>=90) {
letterGrade <- "A"
} else if (numberGrade>=80) {
letterGrade <- "B"
} else if (numberGrade>=70) {
letterGrade <- "C"
} else if (numberGrade>=60) {
letterGrade <- "D"
} else {
letterGrade <- "F"
}
print letterGrade
numberGrade <- 74
if (numberGrade>=90) {
letterGrade <- "A"
} else if (numberGrade>=80) {
letterGrade <- "B"
} else if (numberGrade>=70) {
letterGrade <- "C"
} else if (numberGrade>=60) {
letterGrade <- "D"
} else {
letterGrade <- "F"
}
print(letterGrade)
numberGrade <- 85
if (numberGrade>=90) {
letterGrade <- "A"
} else if (numberGrade>=80) {
letterGrade <- "B"
} else if (numberGrade>=70) {
letterGrade <- "C"
} else if (numberGrade>=60) {
letterGrade <- "D"
} else {
letterGrade <- "F"
}
print(letterGrade)
numberGrade <- 22
if (numberGrade>=90) {
letterGrade <- "A"
} else if (numberGrade>=80) {
letterGrade <- "B"
} else if (numberGrade>=70) {
letterGrade <- "C"
} else if (numberGrade>=60) {
letterGrade <- "D"
} else {
letterGrade <- "F"
}
print(letterGrade)
aDie <- 1:6
for (i in 1:100) {
roll <- sample(aDie, size=1, replace)
result[i] <- roll
}
avg <- mean(result)
aDie <- 1:6
result <- 1
for (i in 1:100) {
roll <- sample(aDie, size=1, replace)
result[i] <- roll
}
avg <- mean(result)
aDie <- 1:6
result <- c(1)
for (i in 1:100) {
roll <- sample(aDie, size=1, replace)
result[i] <- roll
}
avg <- mean(result)
aDie <- 1:6
result <- c()
for (i in 1:100) {
roll <- sample(aDie, size=1, replace)
result[i] <- roll
}
aDie <- 1:6
result <- c()
for (i in 1:100) {
roll <- sample(aDie, size=1, replace)[1]
result[i] <- roll
}
avg <- mean(result)
aDie <- 1:6
result <- c()
for (i in 1:100) {
result[i] <- sample(aDie, size=1, replace)[1]
}
aDie <- 1:6
result <- c()
for (i in 1:100) {
result[i] <- sample(aDie, size=1, replace=FALSE)
}
avg <- mean(result)
aDie <- 1:6
result <- c()
for (i in 1:100) {
result[i] <- sample(aDie, size=1, replace=FALSE)
}
avg <- mean(result)
mean(result)
aDie <- 1:6
count <- 0
for (i in 1:100) {
if (sample(aDie, size=1, replace=FALSE) == 6) {
count <- count +1
}
}
aDie <- 1:6
count <- 0
for (i in 1:100) {
if (sample(aDie, size=1, replace=FALSE) == 6) {
count <- count + 1
}
}
aDie <- 1:6
result <- c()
for (i in 1:100) {
result[i] <- sample(aDie, size=1, replace=FALSE)
}
coun <- length(result[result==6])
coun
install.packages("ggplot2")
?diamonds
?diamonds
library(ggplot2)
?diamonds
head(diamonds)
str(diamonds)
summary(diamonds)
class(diamonds)
typeof(diamonds)
mean(diamonds$price)
sd(diamonds$price)
scatterplot.matrix(Math.SAT+Verbal.SAT+ACT+data=colleges)
scatterplot.matrix(Math.SAT+Verbal.SAT+ACT,data=colleges)
library(car)
scatterplot.matrix(Math.SAT+Verbal.SAT+ACT,data=colleges)
scatterplotMatrix(Math.SAT+Verbal.SAT+ACT,data=colleges)
colleges <- read.csv('/home/ross/school/data_an/hw1/colleges.csv')
library(car)
scatterplotMatrix(Math.SAT+Verbal.SAT+ACT,data=colleges)
scatterplotMatrix(~Math.SAT+Verbal.SAT+ACT,data=colleges)
scatterplotMatrix(~Math.SAT+Verbal.SAT+ACT+Graduation.Rate,data=colleges)
scatterplotMatrix(~Math.SAT+Verbal.SAT+ACT+Graduation.rate,data=colleges)
scatterplotMatrix(~out.of.state.tuition+in.state.tuition,data=colleges)
scatterplotMatrix(~out.of.state.tuition+in.state.tuition+stud..fac..ratio,data=colleges)
scatterplotMatrix(~out.of.state.tuition+in.state.tuition+Math.SAT+ACT,data=colleges)
scatterplotMatrix(~out.of.state.tuition+in.state.tuition+Math.SAT+ACT+stud..fac..ratio+Graduation.rate,data=colleges)
scatterplotMatrix(~out.of.state.tuition+ACT+stud..fac..ratio+Graduation.rate,data=colleges)
scatterplotMatrix(~out.of.state.tuition+ACT+stud..fac..ratio+Graduation.rate,data=colleges)
data(state)
statedata = cbind(data.frame(state.x77),
state.abb, state.area, state.center,
state.division, state.name, state.region)
View(statedata)
View(state.x77)
View(statedata)
?cbind
plot(statedata$x, statedata$y)
?tapply
tapply(statedata$HS.Grad, statedata$Area, mean)
tapply(statedata$HS.Grad, statedata$state.region, mean)
summary(statedata)
sort(tapply(statedata$HS.Grad, statedata$state.region, mean))
?sort
sort(tapply(statedata$HS.Grad, statedata$state.region, mean), decreasing = TRUE)
boxplot(Murder~state.region, data=statedata)
?boxplot
NE <- statedata[statedata$state.region=='Northeast',]
View(colleges)
View(NE)
NE <- statedata[statedata$state.region=='Northeast',]$Murder
outlier <- sort(NE$Murder)
?sort
?order
outlier <- order(NE$Murder)
NE <- statedata[statedata$state.region=='Northeast',]
outlier <- NE[order(NE$Murder)]
View(outlier)
View(outlier)
NE <- statedata[statedata$state.region=='Northeast',]
outlier <- NE[order(NE$Murder)]
outlier <- NE[order(NE$Murder),]
View(outlier)
outlier <- NE[order(NE$Murder, decreasing = TRUE),]
View(outlier)
NE <- NE[order(NE$Murder, decreasing = TRUE),]
outlier <- rownames(NE)
outlier
outlier <- rownames(NE)[1]
outlier
?lm
lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost + Area, data=statedata)
summary(model)
model <- lm(Life.Exp ~ Population + Income + Illiteracy + Murder + HS.Grad + Frost + Area, data=statedata)
summary(model)
?States
?state
plot(statedata$Income, statedata$Life.Exp)
cor(statedata)
cor(statedata[,c("Population","Income","Illiteracy","Murder","HS.Grad","Frost","Area")])
cor(statedata[,c("Life.Exp","Population","Income","Illiteracy","Murder","HS.Grad","Frost","Area")])
library(ggplot2)
data("diamonds")
#|Q2
sub <- diamonds[20:100,]
depth <- subset(diamonds, select = "depth")
View(depth)
data("diamonds")
library(ggplot2)
data("diamonds")
depth <- subset(diamonds, select = "depth")
View(depth)
depth <- subset(diamonds, select = "depth")[,1]
depth <- diamonds[,5]
sub <- diamonds[20:100,]
View(sub)
depth <- subset(diamonds, select = "depth")[,1]
depth <- subset(diamonds, select = "depth")
typeof(depth)
data("diamonds")
typeof("diamonds")
typeof(diamonds)
diamonds[price>=18800]
diamonds[diamonds$price>=18800]
diamonds[price>=18800,]
diamonds[diamonds$price>=18800,]
depth <- subset(diamonds, select = "depth")
class(depth)
depth <- subset(diamonds, select = "depth")[,1]
diamonds[20:100,]
diamonds[20:100,]
diamonds[,'depth']
diamonds[,5]
subset(diamonds, select = "depth")[,1]
diamonds[diamonds$price>=18800,]
die.rolls <- 100
aDie <- 1:6
rolls <- c()
for (i in 1:100) {
roll[i] <- sample(aDie, 1)
}
roll
die.rolls <- 100
aDie <- 1:6
rolls <- c()
for (i in 1:100) {
rolls[i] <- sample(aDie, 1)
}
rolls
sd(rolls)
library(ggplot2)
data("diamonds")
library(ggplot2)
data("diamonds")
mean(diamonds[diamonds$cut=='Ideal'])
mean(diamonds[diamonds$cut=='Ideal',])
mean(diamonds[diamonds$cut=='Ideal',]$price)
mean(diamonds[diamonds$cut=='Ideal',]$price)
View(diamonds)
sample(diamonds$price, size=10)
sample(diamonds$price, size=10)
with(data=diamonds,
table(color, cut))
with(data=diamonds,
table(color, cut)
table(price, cut))
with(data=diamonds,
table(color, cut),
table(price, cut))
aggregate(price ~ cut + color, FUN=1, data = diamonds)
diamonds$boxSize < diamonds$x*diamonds$ydiamonds$z
View(diamonds)
diamonds[,'boxSize'] < diamonds$x*diamonds$ydiamonds$z
diamonds$boxSize < diamonds$x*diamonds$ydiamonds$z
diamonds$boxSize <- diamonds$x*diamonds$ydiamonds$z
diamonds[,'boxSize'] <- diamonds$x*diamonds$ydiamonds$z
diamonds[,'boxSize'] <- diamonds$x*diamonds$y*diamonds$z
diamonds$boxSize <- diamonds$x*diamonds$y*diamonds$z
diamonds$bigPrice <- 0
for (i in 1:length(diamonds)) {
if (diamonds[i,'price'] > 2500) {
diamonds[i,'bigPrice'] <- 1
}
}
diamonds$bigPrice <- 0
for (i in 1:length(diamonds)) {
print(i)
if (diamonds[i,'price'] > 2500) {
diamonds[i,'bigPrice'] <- 1
}
}
diamonds$bigPrice <- 0
for (i in 1:length(diamonds$price)) {
if (diamonds[i,'price'] > 2500) {
diamonds[i,'bigPrice'] <- 1
}
}
mean(diamonds$bigPrice)
diamonds$bigPrice <- 0
diamonds$bigPrice[diamonds$price > 2500] <- 1
diamonds$bigPrice <- NA
diamonds$bigPrice[diamonds$price > 2500] <- 1
diamonds$bigPrice <- 0
diamonds$bigPrice[diamonds$price > 2500] <- 1
?data.frame
names <- c("Nick","Katie","Avery")
grade <- c("D+","A","A")
id <- c(13,5,7)
lis <- list(names, grade, id)
myDataFrame <- data.frame(list)
View(myDataFrame)
myDataFrame <- data.frame(names, grade, id)
View(myDataFrame)
?subset
subset(myDataFrame, grade='A')
subset(myDataFrame, grade=='A')
mean(subset(myDataFrame, grade=='A')$id)
h <- c(5.99,5.31,2.55)
myDataFrame$height <- h
orders <- read.csv('/home/ross/Downloads/orders.csv')
customers <- read.csv('/home/ross/Downloads/customer.csv')
customers <- read.csv('/home/ross/Downloads/customers.csv')
View(customers)
View(orders)
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
customers <- read.csv('/home/ross/Downloads/customers.csv', stringsAsFactors = FALSE)
head(orders)
table(orders$cust_id)
unique(orders$cust_id)
length(unique(orders$cust_id))
sum(orders$item_price)
sum(orders$quantity)
orders$item_price <- as.numeric(orders$item_price)
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("$","",orders$item_price))
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("$","",orders$item_price))
orders$item_price <- as.numeric(sub("$","",as.character(orders$item_price)))
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("$","",as.character(orders$item_price)))
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("$ ","",as.character(orders$item_price)))
orders$item_price <- as.numeric(sub("$ ","",orders$item_price))
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("$ ","",orders$item_price))
View(myDataFrame)
customers <- read.csv('/home/ross/Downloads/customers.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("\\$ ","",orders$item_price))
sum(orders$item_price)
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("\\$ ","",orders$item_price))
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("\\$ ","",orders$item_price))
orders <- read.csv('/home/ross/Downloads/orders.csv', stringsAsFactors = FALSE)
orders$item_price <- as.numeric(sub("\\$","",orders$item_price))
sum(orders$item_price)
length(unique(orders$item_name))
?order
table(orders$item_name, orders$quantity)
?aggregate
aggregate(orders$item_name, orders$quantity, FUN=sum)
aggregate(orders$item_name, by=orders$quantity, FUN=sum)
aggregate(orders$item_name ~ orders$quantity, FUN=sum)
aggregate(orders$item_name, by=list(quantity), FUN=sum)
aggregate(orders$item_name, by=list(orders$quantity), FUN=sum)
aggregate(orders, orders$quantity, FUN=sum)
aggregate(orders, list(orders$quantity), FUN=sum)
aggregate(quantity ~ item_names, FUN=sum, data=orders)
aggregate(quantity ~ item_name, FUN=sum, data=orders)
sort(aggregate(quantity ~ item_name, FUN=sum, data=orders))
?mtcars
setwd('/home/ross/py/DataTools/example_csv/')
?read.csv
loans <- read.csv('loans.csv', stringsAsFactors = FALSE)
setwd('/home/ross/py/DataTools/example_csv/')
loans <- read.csv('loans.csv', stringsAsFactors = FALSE)
View(loans)
model <- glm(Late ~ Income + Assets + Debts + Amount)
model <- glm(Late ~ Income + Assets + Debts + Amount, family=binomial, data = loans)
summary(model)
cereal <- read.csv('cereal.csv', stringsAsFactors = FALSE)
View(cereal)
?lm
model <- lm(Calories ~ Carbs + Sugars + Sodium + Fiber, data = cereal)
summary(model)
